
GccApplication5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000748  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a1  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ce  00000000  00000000  00000fad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000127c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bb  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000067  00000000  00000000  0000166b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000016d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  78:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <chipdata>:
{
uint8_t a;
uint8_t data;
uint8_t datareceived=0;

  for (a=0; a<255; a++)
  80:	80 e0       	ldi	r24, 0x00	; 0
  {
	 PORTB &= ~(1<<PB6); // Pulls chip select low
  82:	2e 98       	cbi	0x05, 6	; 5
	 SPDR = a;
  84:	8e bd       	out	0x2e, r24	; 46
	 while (!(SPSR & (1<<SPIF) )); //transfer data
  86:	0d b4       	in	r0, 0x2d	; 45
  88:	07 fe       	sbrs	r0, 7
  8a:	fd cf       	rjmp	.-6      	; 0x86 <chipdata+0x6>
	 a = SPDR;
  8c:	8e b5       	in	r24, 0x2e	; 46
 	 PORTB |= (1<<PB6); // Set chip select high
  8e:	2e 9a       	sbi	0x05, 6	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	ef e4       	ldi	r30, 0x4F	; 79
  92:	f3 ec       	ldi	r31, 0xC3	; 195
  94:	31 97       	sbiw	r30, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <chipdata+0x14>
  98:	00 c0       	rjmp	.+0      	; 0x9a <chipdata+0x1a>
  9a:	00 00       	nop
{
uint8_t a;
uint8_t data;
uint8_t datareceived=0;

  for (a=0; a<255; a++)
  9c:	8f 5f       	subi	r24, 0xFF	; 255
  9e:	8f 3f       	cpi	r24, 0xFF	; 255
  a0:	81 f7       	brne	.-32     	; 0x82 <chipdata+0x2>
	 a = SPDR;
 	 PORTB |= (1<<PB6); // Set chip select high
	 _delay_ms (200);
  }

}
  a2:	08 95       	ret

000000a4 <main>:
int chipdata();

int main(void)
{
    /* Replace with your application code */
	SPCR |= (1<<SPE); //SPI enabled
  a4:	8c b5       	in	r24, 0x2c	; 44
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (0<<SPIE); //Interrupts
  aa:	8c b5       	in	r24, 0x2c	; 44
  ac:	8c bd       	out	0x2c, r24	; 44
	SPCR &= ~(1<<DORD); //Data Order
  ae:	8c b5       	in	r24, 0x2c	; 44
  b0:	8f 7d       	andi	r24, 0xDF	; 223
  b2:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1<<MSTR); //Master
  b4:	8c b5       	in	r24, 0x2c	; 44
  b6:	80 61       	ori	r24, 0x10	; 16
  b8:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1<<CPOL);
  ba:	8c b5       	in	r24, 0x2c	; 44
  bc:	88 60       	ori	r24, 0x08	; 8
  be:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1<<CPHA)|(0<<CPHA);
  c0:	8c b5       	in	r24, 0x2c	; 44
  c2:	84 60       	ori	r24, 0x04	; 4
  c4:	8c bd       	out	0x2c, r24	; 44
	DDRB |= (1<<PB3)|(1<<PB5)|(1<<PB2)|(1<<PB6); 
  c6:	84 b1       	in	r24, 0x04	; 4
  c8:	8c 66       	ori	r24, 0x6C	; 108
  ca:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<PB3);
  cc:	2b 9a       	sbi	0x05, 3	; 5
    while(1)
    {
	  chipdata();
  ce:	0e 94 40 00 	call	0x80	; 0x80 <chipdata>
  d2:	fd cf       	rjmp	.-6      	; 0xce <main+0x2a>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
